# -*- coding: utf-8 -*-
"""LLM_transformer_fine_tuning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kuy7Yjq5izSvWkrrqmUbyl3ErfQAVm_8
"""

'''
1. **Prepare Dataset**
   - Gather and preprocess the dataset for model training.

2. **Load Pretrained Tokenizer and Encode Dataset**
   - Initialize a pretrained tokenizer and use it to encode the dataset.

3. **Create PyTorch Dataset from Encodings**
   - Construct a PyTorch-compatible dataset using the encoded data.

4. **Load Pretrained Model**
   - Load the pretrained model for downstream training.

5. **Training Options**
   - **Option A:** Utilize the Hugging Face Trainer API for training.
   - **Option B:** Implement a custom training loop using native PyTorch functionality.

'''

###########################################################
###########################################################
##############.      Train.     ###########################
###########################################################
###########################################################
# Prepare dataset
from pathlib import Path
from sklearn.model_selection import train_test_split
import torch
from torch.utils.data import Dataset
from transformers import DistilBertTokenizerFast, DistilBertForSequenceClassification
from transformers import Trainer, TrainingArguments

model_name = "distilbert-base-uncased"

def read_imdb_split(split_dir):
    split_dir = Path(split_dir)
    texts = []
    labels = []
    for label_dir in ["pos", "neg"]:
        for text_file in (split_dir/label_dir).iterdir():
            texts.append(text_file.read_text())
            labels.append(0 if label_dir == "neg" else 1)

    return texts,labels

train_texts, train_labels = read_imdb_split('vahid/train')
test_texts, test_labels = read_imdb_split('vahid/test')
train_texts, val_texts, train_labels, val_labels = train_test_split(train_texts, train_labels, test_size=.2)

class IMDbDataset (Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels
    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item
    def __len__(self):
        return len(self.labels)


tokenizer = DistilBertTokenizerFast.from_pretrained(model_name)

# ensure that all of our sequences are padded to the same length
# and are truncated to be no longer than model's
# maximum input length. This will allow us to feed batches of
# sequences into the model at the same time.
train_encodings = tokenizer(train_texts, truncation=True, padding=True)
val_encodings = tokenizer(val_texts, truncation=True, padding=True)
test_encodings = tokenizer (test_texts, truncation=True, padding=True)

train_dataset = IMDbDataset (train_encodings, train_labels)
val_dataset = IMDbDataset (val_encodings, val_labels)
test_dataset = IMDbDataset (test_encodings, test_labels)

training_args = TrainingArguments(
    output_dir='./results',             # output directory
    num_train_epochs=2,                 # total number of training epochs
    per_device_train_batch_size=16,     # batch size per device during training
    per_device_eval_batch_size=64,      # batch size for evaluation
    warmup_steps=500,     # number of warmup steps for learning rate scheduler
    learning_rate=5e-5,   # Learning rate
    weight_decay=0.01,    # strength of weight decay
    logging_dir='./logs', # directory for storing logs
    logging_steps=10,
    report_to="none"
)

model = DistilBertForSequenceClassification.from_pretrained(model_name)
trainer  = Trainer(
    model=model,                 # the instantiated Transformers model to be trained
    args=training_args,          # training arguments, defined above
    train_dataset=train_dataset, # training dataset
    eval_dataset=val_dataset,    # evaluation dataset
)

trainer.train()


###########################################################
###########################################################
##############.  Evaluation.    ###########################
###########################################################
###########################################################
# Fine-tuning using native pytorch:

from torch.utils.data import DataLoader
from transformers import AdamW
device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')
model = DistilBertForSequenceClassification.from_pretrained('distilbert-base-uncased')
model.to(device)
model.train()
train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)
optim = AdamW(model.parameters(), lr=5e-5)

num_train_epochs = 2
for epoch in range (num_train_epochs):
    for batch in train_loader:
        optim.zero_grad()
        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['labels'].to(device)

        outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
        Loss = outputs[0]
        Loss.backward()
        optim.step()

model.eval()

###########################################################
###########################################################
##############.  save           ###########################
###########################################################
###########################################################
save_dir = "save_path"
tokenizer.save_pretrained(save_dir)
model.save_pretrained(save_dir)
print("Model saved.")



###########################################################
###########################################################
##############.  Load           ###########################
###########################################################
###########################################################
from transformers import AutoTokenizer, AutoModelForSequenceClassification
tokenizer = AutoTokenizer.from_pretrained(save_dir)
new_model = AutoModelForSequenceClassification.from_pretrained(save_dir)
print(new_model)